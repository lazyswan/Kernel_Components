Author: Swanand



#Whats a RTOS?

Resouce manager
	Manages controller Peripheral
	Scheduling Tasks/Thread
	
*It Guarantees Deadline. 

RTOS is simpler as compared to GPOS
	-No MMU, Thus No paging and Virtualisation
	-Only few Threads
	-More Predictable Behavior.
	
#Performace Metrics:

Deadline:
	Deriving to the right result within a set constrain.

Reliability:
	Running in a predictable way with a guranteed response.
	
-------------------------------------------------------------
Control Unit:
	Directs the Operation of Processor
Arithmetic Logic Unit:
	Register:
		13 Rx are GPR-->R0-R12
		3 Special Function Rx --> R13(SP); R14(LR); R15(PC)
			R13--> SP-->Main Stack Pointer(MSP)
			R14--> Program Stack POinter(PSP)
				MSP: Used by OS-Kernel (Default)
					 Used by ISR/ Handler Mode
				PSR: Use by Application Tasks/Thread
				
			R15--> Link Register--> Retrun Address
					Program Counter--> Read From This Register: Curr Inst Add+4
								   --> Write to This Register: Causes Jmp/Branch
		Status Registers:
				PSR
				PRIMASK
				BASEPRI
				CONTROL
-------------------------------------------------------------
States:	
	Thumb State--> Processors executes the Instruction in Thumb State
		Thread Mode
		Handler Mode
	Debug State--> Enters this State during debugging

Operation Mode:
	Thread Mode:
		Executing Normal Application code
			It can be Priveledge or UnPriveledge access level
	Handler Mode:
		ISR 
		Has Priveledge Access Level
		
Access Level:
	Priveledge
		All the Registers are accesssible	
	Non Priveledge
		Access to few Status/Control Register are Restricted.
		
--------------------------------------------------------------------
Shadow Stack POinters:

R14--> Program Stack POinter(PSP)
				MSP: Used by OS-Kernel (Default)
					 Used by ISR/ Handler Mode
				PSR: Use by Application Tasks/Thread
				
This allows us to maintain 2 stack Frames.
Instruction to access the SP:
	MSR
	MRS
--------------------------------------------------------------------
Supervisor Call Exception (SVC)

	Its generated by SVC Instruction
	It allows tasks to gain/acess system level privilege
	
	The application temporary gets privilege level access;
	Concept is synonymous to system call.
	
	It allows Tasks to be developed independently of OS-Kernel
	Doesnot require to know the ISR address of OS-Kernel
	
	It Just needs to know to SVC service Number and parameters OS requires.
	
	svc 0x4
	svc 0x5
	svc #5
	
SVC Handler
	4.Run SVC service
		3. Determine SVC Number
			2.Read PC Register to determine the SVC Number
				1.LR is used to determine the Stack, so it can read PC from
				  corresponding MSR/PSR stack frame.

When the Processor enters the Exception Handler/ISR,
the value of LR isupdated with special value called EXE_RETURN
bit[2] of EXE_RETURN --> 1: return to MS
					 --> 0: return to PS

	When Processor enters the SVC Handler,
	It executes the services we have assigned
		
	When a Processor is running isr,
	It has to first store context,(Pushesh Register in Order-
														-R0,R1,R2,R3,R12,R14,R15
	onto the PSP or MSP.
	This Stack Frame is accessible, 
	This same Stack frame is passed to SVC handler,It can be access via pointer 
	passed to SVC_Handler.
-------------------------------------------------------------------------

PendSV Exception

	It is used to minimise the latency Experience in ISR
	SVC Exceptions are used to allow threads to make calls to Kernel
	Systick Timer is used generate Periodic Interrupt to run OS scheduler.
	
	
	Systick Highest Priority followed by SVC, IRQ and Threads are Least Proirity
	
Exclusive Access:
	Serialises the access to critical Section, Shared Resources.
	Task1:
	Task2:
	Task3:

Shared Resources:
Flags:
	Semaphore
	Mutex

Disabling/Enabling Interrupts

Exclusive Access Instruction(Atomic Variable)
	Ex. Load--->LDREX
	Ex. Store-->STREX
	
-------------------------------------------------------------------------
Sys_Tick
	24bit Down Counter which runs at bus clock frequency .
	
SysTick Control and Status Register
SysTick Reload Value Register
SysTick Current Value Register --> clear the value.
SysTick Priority Register.



1. Disable SysTick
2. Set Period
3. Clear Initial Value
4. set SysTick Priority
5. Enable SysTick
6. Set clock source
7. Enable Interrupt

-----------------------------------------------------------------------
Boot Sequence

	When we press the reset button/sw reset
	1. All the registers are set to reset values.
	2. Processor Determines the Boot mode
	3. Fetch MSP from address 0x0000_0000
	4. Fetch PC  from  address  0x0000_0004
	
	
	Inside Flash ROM
		0x0000_0000 MSP value
		0x0000_0004 Reset Handler
					->Assembly code, loads the address of main function into PC
					
	*LSB bit of the address denotes whether processor is in Thumb mode or normal
	mode

Boot Sequence:
1. R13 is loaded with StackPointer
2. R15 is loaded with the address of Reset Handlers--> main function
2. R14 LR is loaded with the address 0xFFFF_FFFF
------------------------------------------------------------------------
Threads

	All threads have programs to execute,
	Multiple Threads can execute same threads
	Each Thread have own Stack,Register and Program to execute.
	
But we have only one set of Registers, so Thread Scheduler takes care of 
executing multiple threads on a single core.


Types of Threads:
	Spordic -> Doesnot run frequently, only in times of system failure
	Periodic-> Run periodically
	Aperiodic-> Frequently but cannot be anitcipated 
	
Event Triggered Thread

	Flag -> Runs when flag is set
	Input Triggered Thread -> Run when i/p ;o/p event occurs
	Output Triggered Thread ->o/p event occurs	
	
Main Thread



Thread Control Block (TCB)
	Contains information private to each threads
	Must have pointer to stack
			  pointer to the next threads
			  
	variable to hold thread status,
	variable to hold thread ID
	variable to hold thread Period
	variable to hold thread Burst Time
	variable to hold thread priority
	
	struct tcb{
		int32_t *stackpt;
		struct tcb *nextpt;
		uint32_t tid;
		uint32_t status;
		uint32_t period;
		uint32_t burstTime;	
	};

	
-------------------------------------------------------------------------

	
	
